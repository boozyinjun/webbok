pipeline {
    agent { label 'master' }

    tools {
        // Install the Maven version configured as "M3" and add it to the path.
        maven "MAVEN3.5.2"
    }

    options {
        buildDiscarder(logRotator(numToKeepStr: '3'))
        timestamps()
        ansiColor('xterm')
    }

    triggers {
        cron('H */4 * * 1-5')
    }

    parameters {
        string defaultValue: 'test string', description: 'введите строку', name: 'MY_STRING'
    }

    environment { 
        DB_URL = "jdbc:postgresql://158.160.125.220:5432/webbooks"
    }

    stages {
        stage('Build') {
            steps {
                script {
                    if (env.BRANCH_NAME == "main") {
                        echo "${params.MY_STRING}"
                    }
                
                    // Get some code from a GitHub repository
                    // git branch: 'main', credentialsId: 'github-http', poll: false, url: 'https://github.com/levelup-devops/2023-09-example.git'

                    dir('apps/webbooks') {
                        // Run Maven on a Unix agent.
                        sh "mvn package"
                        // sh "mvn -DDB.url=jdbc:postgresql://158.160.125.220:5432/webbooks package"
                    }
                }
            }
            post {
                // If Maven was able to run the tests, even if some of the test
                // failed, record the test results and archive the jar file.
                success {
                    dir('apps/webbooks') {
                        junit '**/target/surefire-reports/TEST-*.xml'
                    }
                }
            }
        }

        stage('Artifacts') {
            when { expression { env.BRANCH_NAME == "main" } }

            steps {
                dir('apps/webbooks') {
                    // Run Maven on a Unix agent.
                    archiveArtifacts 'target/*.jar'
                }
                
            }
        }
    }
}
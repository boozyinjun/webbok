def stagePrepare(apps, action) {
    buildStageList = []
    buildParallelMap = [:]
    apps.each { app, value ->
        if (action == "build") {
            buildParallelMap.put(app, stageBuildCreate(app, value))
        }
        if (action == "upload") {
            buildParallelMap.put(app, stageUploadCreate(app, value))
        }
    }
    buildStageList.add(buildParallelMap)
    return buildStageList
}

def stageBuildCreate(app, value) {
    return {
        stage(app) {
            dir("apps/${app}") {
                sh "mvn -B -DskipTests -Dmaven.repo.local=${WORKSPACE}/.m2/repository clean package"
            }
        }
    }
}

def stageUploadCreate(app, value) {
    return {
        stage(app) {
            dir("apps/${app}") {
                sh "mvn -DskipTests -s settings.xml -Dmaven.repo.local=${WORKSPACE}/.m2/repository deploy"
            }
        }
    }
}



pipeline {
    agent any
    
    options {
        buildDiscarder(logRotator(numToKeepStr: '2'))
        disableConcurrentBuilds()
        timestamps()
        ansiColor('xterm')
    }

    tools {
        jdk 'JDK8'
        maven 'MAVEN3.8.6'
    }

    environment {
      GITHUB_REPO_CRED = credentials("github-http")
      GITHUB_REPO_OWNER = "levelup-devops"
	  GITHUB_REPO_NAME = "2023-09-example"
      GITHUB_REPO_URL = "https://github.com/${GITHUB_REPO_OWNER}/${GITHUB_REPO_NAME}.git"
      APPS_LIST_FILE = "apps/apps.json"
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', changelog: false, credentialsId: 'github-http', poll: false, url: env.GITHUB_REPO_URL
            }
        }
        stage('Prepare') {
            steps {
                script {
                    def apps = readJSON file: env.APPS_LIST_FILE
                    buildStages = stagePrepare(apps, "build")
                    uploadStages = stagePrepare(apps, "upload")
                }
            }
        }

        stage('Build') {
            steps {
                script {
                    buildStages.each { build ->
                        parallel build
                    }
                }
            }
        }

        stage('Upload') {
            steps {
                script {
                    uploadStages.each { upload ->
                        parallel upload
                    }
                }
            }
        }
    }
}
